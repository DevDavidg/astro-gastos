import{j as b}from"./jsx-runtime.D_zvdyIk.js";import{r as d}from"./index.DFATbet1.js";import{s as i}from"./supabase.D8XsvUjI.js";import J from"./LoadingSpinner.CRtF3Vaf.js";const R=async()=>{const{data:o,error:n}=await i.from("personas").select("*");if(n)throw console.error("Error al obtener personas:",n),n;return o||[]},F=async()=>{const{data:{user:o},error:n}=await i.auth.getUser();if(n||!o)throw console.error("Error al obtener usuario:",n),new Error("Usuario no autenticado");const{data:t,error:c}=await i.from("gastos").select("*").eq("usuarioid",o.id);if(c)throw console.error("Error al obtener gastos del usuario:",c),c;const{data:f,error:m}=await i.from("gastos").select("*").eq("otrapersonaemail",o.email);if(m)throw console.error("Error al obtener gastos compartidos:",m),m;return[...t||[],...f||[]].filter((l,g,y)=>g===y.findIndex(p=>p.id===l.id)).map(l=>({...l,otraPersonaEmail:l.otrapersonaemail,fecha:new Date(l.fecha),fechaCreacion:l.fechaCreacion?new Date(l.fechaCreacion):void 0,fechaActualizacion:l.fechaActualizacion?new Date(l.fechaActualizacion):void 0}))},k=async o=>{if(!o.usuarioid)throw new Error("El usuario_id es requerido para crear un gasto");const n={mes:o.mes,descripcion:o.descripcion,monto:o.monto,fecha:o.fecha.toISOString().split("T")[0],personaid:o.personaid,escompartido:o.escompartido,porcentajepersona1:o.porcentajepersona1,porcentajepersona2:o.porcentajepersona2,usuarioid:o.usuarioid,otrapersonaemail:o.escompartido?o.otraPersonaEmail:null},{data:t,error:c}=await i.from("gastos").insert(n).select().single();if(c)throw console.error("Error al crear gasto:",c),c;return{...t,otraPersonaEmail:t.otrapersonaemail,fecha:new Date(t.fecha),fechaCreacion:t.fechaCreacion?new Date(t.fechaCreacion):void 0,fechaActualizacion:t.fechaActualizacion?new Date(t.fechaActualizacion):void 0}},B=async o=>{try{const{data:{user:n}}=await i.auth.getUser();if(!n)throw new Error("Usuario no autenticado");const{data:t,error:c}=await i.from("gastos").select("*").eq("id",o).single();if(c||!t){console.error("No se encontró el gasto:",c);return}const f=t.usuarioid===n.id,m=t.otrapersonaemail===n.email;if(!f&&!m)throw console.error("El usuario no tiene permisos para eliminar este gasto"),new Error("No tienes permisos para eliminar este gasto");const{error:w}=await i.from("gastos").delete().eq("id",o);if(w)throw console.error("Error al eliminar gasto:",w),w;await new Promise(l=>setTimeout(l,1e3));const{data:h}=await i.from("gastos").select("id").eq("id",o);if(h&&h.length>0)throw console.error("El gasto sigue existiendo después de la eliminación"),new Error("El gasto no se eliminó correctamente")}catch(n){throw console.error("Error en eliminarGasto:",n),n}},K=async(o,n)=>{const{error:t}=await i.from("personas").update({sueldo:n}).eq("id",o);if(t)throw console.error("Error al actualizar sueldo:",t),t},Y=async(o,n)=>{const{error:t}=await i.from("personas").update({nombre:n}).eq("id",o);if(t)throw console.error("Error al actualizar nombre:",t),t},H=async o=>{const{data:n,error:t}=await i.rpc("get_user_email_by_persona_id",{persona_id:o});return t?(console.error("Error al obtener email de usuario:",t),null):n??null},S="user_preferences",z={currency:"USD",theme:"light",language:"es"},j=()=>{if(typeof window>"u")return z;const o=localStorage.getItem(S);if(!o)return localStorage.setItem(S,JSON.stringify(z)),z;try{return JSON.parse(o)}catch{return z}},Q=o=>{const t={...j(),...o};return localStorage.setItem(S,JSON.stringify(t)),t},T=d.createContext(void 0),rr=({children:o})=>{const[n,t]=d.useState([]),[c,f]=d.useState([]),[m,w]=d.useState(!0),[h,l]=d.useState({}),[g,y]=d.useState(j()),[p,v]=d.useState(null),[G,U]=d.useState(!1);d.useEffect(()=>{let a=!0;(async()=>{try{const{data:s}=await i.auth.getSession();a&&(v(s.session?.user||null),U(!0))}catch(s){console.error("Error initializing auth:",s),a&&U(!0)}})();const{data:{subscription:e}}=i.auth.onAuthStateChange((s,u)=>{a&&v(u?.user||null)});return()=>{a=!1,e.unsubscribe()}},[]),d.useEffect(()=>{G&&p&&x()},[p,G]),d.useEffect(()=>{const a=()=>{P()};return window.addEventListener("actualizarGastos",a),()=>{window.removeEventListener("actualizarGastos",a)}},[]);const x=async()=>{if(p){w(!0);try{const[a,r,e]=await Promise.all([F(),R(),j()]);if(r&&r.length>0){const s={},u=[...new Set(a.map(E=>E.personaid))];await Promise.all(u.map(async E=>{const $=await H(E);$&&(s[E]=$)})),l(s),t(a),f(r),y(e)}else console.error("No personas found in database"),t([]),f([])}catch(a){console.error("Error al cargar datos:",a),t([]),f([])}finally{w(!1)}}},P=async()=>{await x()},C=async(a,r,e)=>{const{error:s}=await i.from("notifications").insert({user_id:a,title:`Nuevo gasto compartido de ${r.nombre}`,message:`${e.descripcion} - Monto: ${e.monto} - Tu porcentaje: ${e.porcentajepersona2}%`});s&&console.error("Error al crear notificación:",s)},M=async(a,r,e)=>{try{const{data:s}=await i.from("personas").select("usuarioid, email").eq("email",a).maybeSingle();if(s){await C(s.usuarioid,r,e);return}const{data:u}=await i.rpc("get_user_id_by_email",{email_input:a});u?.[0]?.id&&await C(u[0].id,r,e)}catch(s){console.error("Error al procesar notificación:",s)}},D=async a=>{if(!p)throw new Error("Usuario no autenticado");try{const{otraPersonaEmail:r,...e}=a,s=await k({...e,usuarioid:p.id,fecha:new Date,otraPersonaEmail:e.escompartido?r:void 0});if(t(u=>[...u,s]),window.dispatchEvent(new CustomEvent("actualizarGastos")),e.escompartido&&r){const u=c.find(E=>E.id===e.personaid);if(!u){console.error("No se encontró la persona principal");return}await M(r,u,e)}}catch(r){throw console.error("Error al agregar gasto:",r),r}},N=async a=>{try{t(r=>{const e=r.filter(s=>s.id!==a);return window.dispatchEvent(new CustomEvent("gastoEliminado",{detail:{id:a}})),e}),B(a).catch(r=>{console.error("Error al eliminar el gasto:",r),P()})}catch(r){throw console.error("Error al eliminar el gasto:",r),r}},_=async(a,r)=>{try{await K(a,r),f(e=>e.map(s=>s.id===a?{...s,sueldo:r}:s))}catch(e){throw console.error("Error al actualizar sueldo:",e),e}},q=async(a,r)=>{try{await Y(a,r),f(e=>e.map(s=>s.id===a?{...s,nombre:r}:s))}catch(e){throw console.error("Error actualizando nombre de persona:",e),e}},A=async a=>{try{if(!p){console.error("No user found when updating preferences");return}const r=Q(a);r?y(r):console.error("Failed to update user preferences")}catch(r){console.error("Error al actualizar preferencias:",r)}},I=a=>n.reduce((r,e)=>e.personaid===a?r+e.monto:e.escompartido&&e.porcentajepersona1&&e.porcentajepersona2?r+e.monto*(a==="persona1"?e.porcentajepersona1:e.porcentajepersona2)/100:r,0),L=(a,r)=>{const e=a+r;if(e===0)return{porcentajePersona1:50,porcentajePersona2:50};const s=Math.round(a/e*100),u=100-s;return{porcentajePersona1:s,porcentajePersona2:u}},O=d.useMemo(()=>({gastos:n,personas:c,isLoading:m,userPreferences:g,emailsMap:h,agregarGasto:D,eliminarGasto:N,actualizarSueldoPersona:_,actualizarNombrePersona:q,obtenerTotalGastosPorPersona:I,calcularPorcentajeGasto:L,recargarDatos:P,setUserPreferences:A}),[n,c,m,g,h,D,N,_,q,I,L,P,A]);return G?b.jsx(T.Provider,{value:O,children:o}):b.jsx("div",{className:"flex justify-center items-center h-64",children:b.jsx(J,{size:"large",color:"primary"})})};function er(){const o=d.useContext(T);if(o===void 0)throw new Error("useGastos debe ser usado dentro de un GastosProvider");return o}export{rr as G,er as u};
